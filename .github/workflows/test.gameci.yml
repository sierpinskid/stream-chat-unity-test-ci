name: Unity CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targetPlatform: [android, ios]
        unityVersion: [2020, 2021]
        dotnet_version: [NET_4_x, STANDARD_2_x]
        compiler: [mono, il2cpp]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Git
        run: git config --global --add safe.directory /github/workspace

#      - name: Cache Unity
#        uses: actions/cache@v2
#        with:
#          path: ~/.cache/unity3d
#          key: Unity-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
#          restore-keys: |
#            Unity-${{ matrix.unityVersion }}-
#            Unity-

#      - name: Cache Library folder
#        uses: actions/cache@v2
#        with:
#          path: ${{ github.workspace }}/Library
#          key: Library-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
#          restore-keys: |
#            Library-

      - name: Install dependencies
        run: sudo apt-get install -y libxtst6 libgtk-3-0

      - name: Determine Docker Image
        id: dockerImageSelector
        run: |
          if [ "${{ inputs.unity_version }}" == '2020' ]; then
          	if [ "${{ inputs.target_platform }}" == 'android' ]; then
          		TAG='unityci/editor:ubuntu-2020.3.40f1-android-3.1.0'
          	fi
          	if [ "${{ inputs.target_platform }}" == 'ios' ]; then
          		TAG='unityci/editor:ubuntu-2020.3.40f1-ios-3.1.0'
          	fi
          fi
          
          if [ "${{ inputs.unity_version }}" == '2021' ]; then
          	if [ "${{ inputs.target_platform }}" == 'android' ]; then
          		TAG='unityci/editor:ubuntu-2021.3.40f1-android-3.1.0'
          	fi
          	if [ "${{ inputs.target_platform }}" == 'ios' ]; then
          		TAG='unityci/editor:ubuntu-2021.3.40f1-ios-3.1.0'
          	fi
          fi
          
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
      
      - name: Enable Tests
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          #targetPlatform: Android
          #unityVersion: 2020.3.48f1
          buildMethod: StreamChat.EditorTools.StreamEditorTools.EnableStreamTestsEnabledCompilerFlag
          customImage: ${{ steps.dockerImageSelector.outputs.TAG }}"

      - name: Run Tests
        uses: game-ci/unity-test-runner@v4
        #continue-on-error: true #TEST ONLY REMOVE THIS
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          #targetPlatform: Android
          #unityVersion: 2020.3.48f1
          customParameters: -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }}
          customImage: ${{ steps.dockerImageSelector.outputs.TAG }}"

      - name: Upload Test Results as Artifact
        uses: actions/upload-artifact@v4
        #if: always()
        #continue-on-error: true #TEST ONLY REMOVE THIS
        with:
          name: Test results
          path: artifacts

      - name: Free Disk space
        uses: jlumbroso/free-disk-space@v1.2.0
        #if: matrix.targetPlatform == 'Android'

      - name: List changes
        run: |
              git diff

      - name: Build Sample Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          #targetPlatform: Android
          #unityVersion: 2020.3.48f1
          buildMethod: StreamChat.EditorTools.StreamEditorTools.BuildSampleApp
          customParameters: -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }} -apiCompatibility "NET_4_x" -scriptingBackend "il2cpp" -buildTargetPlatform "mobile" -buildTargetPath $(pwd)/SampleAppBuild/App.apk
          customImage: ${{ steps.dockerImageSelector.outputs.TAG }}"
          allowDirtyBuild: true #Needed because import process may update ProjectSettings

      - name: Upload Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build
          path: $(pwd)/SampleAppBuild/App.apk
