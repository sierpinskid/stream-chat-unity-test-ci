name: CI - Internal Logic

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      unity_version:
        required: true
        type: string
      dotnet_version:
        required: true
        type: string
      compiler:
        required: true
        type: string
      target_platform:
        required: true
        type: string
    secrets:
      UNITY_ACCOUNT_USER:
        required: true
      UNITY_ACCOUNT_PASS:
        required: true
      EMAIL_PASS:
        required: true

jobs:
  testRunner:
    runs-on: ${{ inputs.os }}
    timeout-minutes: 600
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Print chipset
#        shell: bash
#        run: uname -m
#        continue-on-error: true

      - name: Set up Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

#      - name: Print python version
#        shell: bash
#        run: python --version
#        continue-on-error: true

      - name: Check Secrets
        run: |
          if [ -z "${{ secrets.UNITY_ACCOUNT_USER }}" ]; then
            echo "Error: Secret UNITY_ACCOUNT_USER is empty or not defined."
            exit 1
          else
            echo "Secret UNITY_ACCOUNT_USER is set."
          fi
          if [ -z "${{ secrets.UNITY_ACCOUNT_PASS }}" ]; then
            echo "Error: Secret UNITY_ACCOUNT_PASS is empty or not defined."
            exit 1
          else
            echo "Secret UNITY_ACCOUNT_PASS is set."
          fi
          if [ -z "${{ secrets.EMAIL_PASS }}" ]; then
            echo "Error: Secret EMAIL_PASS is empty or not defined."
            exit 1
          else
            echo "Secret EMAIL_PASS is set."
          fi

      - name: Check Inputs
        run: |
          if [ -z "${{ inputs.UNITY_ACCOUNT_USER }}" ]; then
            echo "Error: Input UNITY_ACCOUNT_USER is empty or not defined."
            exit 1
          else
            echo "Input UNITY_ACCOUNT_USER is set."
          fi
          if [ -z "${{ inputs.UNITY_ACCOUNT_PASS }}" ]; then
            echo "Error: Input UNITY_ACCOUNT_PASS is empty or not defined."
            exit 1
          else
            echo "Input UNITY_ACCOUNT_PASS is set."
          fi
          if [ -z "${{ inputs.EMAIL_PASS }}" ]; then
            echo "Error: Input EMAIL_PASS is empty or not defined."
            exit 1
          else
            echo "Input EMAIL_PASS is set."
          fi

      - name: Install node package, `unity-license-activate`
        run: npm install --global https://github.com/sierpinskid/unity-license-activate

      - name: Install node package, `unity-verify-code`
        run: npm install --global https://github.com/sierpinskid/unity-verify-code

      - name: Download Unity & Modules
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            # (macOS specific download logic)
            if [[ ${{ inputs.unity_version }} == '2021.3.0' ]]; then
              curl -L -o ~/Unity.pkg https://download.unity3d.com/download_unity/6eacc8284459/MacEditorInstaller/Unity.pkg
              if [[ ${{ inputs.compiler }} == 'il2cpp' ]]; then
                curl -L -o ~/UnityIL2CPPModule.pkg https://download.unity3d.com/download_unity/6eacc8284459/MacEditorTargetInstaller/UnitySetup-Mac-IL2CPP-Support-for-Editor-2021.3.0f1.pkg
              fi
              if [[ ${{ inputs.target_platform }} == 'mobile' ]]; then
                curl -L -o ~/UnityIosModule.pkg https://download.unity3d.com/download_unity/6eacc8284459/MacEditorTargetInstaller/UnitySetup-iOS-Support-for-Editor-2021.3.0f1.pkg
              fi
            elif [[ ${{ inputs.unity_version }} == '2020.3.0' ]]; then
              curl -L -o ~/Unity.pkg https://download.unity3d.com/download_unity/1fb1bf06830e/MacEditorInstaller/Unity.pkg
              if [[ ${{ inputs.compiler }} == 'il2cpp' ]]; then
                curl -L -o ~/UnityIL2CPPModule.pkg https://download.unity3d.com/download_unity/c7b5465681fb/MacEditorTargetInstaller/UnitySetup-Mac-IL2CPP-Support-for-Editor-2020.3.0f1.pkg
              fi
              if [[ ${{ inputs.target_platform }} == 'mobile' ]]; then
                curl -L -o ~/UnityIosModule.pkg https://download.unity3d.com/download_unity/c7b5465681fb/MacEditorTargetInstaller/UnitySetup-iOS-Support-for-Editor-2020.3.0f1.pkg
              fi
            fi
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            # (Linux specific download logic)
            if [[ ${{ inputs.unity_version }} == '2021.3.0' ]]; then
              curl -L -o ~/Unity.tar.xz https://download.unity3d.com/download_unity/6eacc8284459/LinuxEditorInstaller/Unity.tar.xz
              if [[ ${{ inputs.compiler }} == 'il2cpp' ]]; then
                curl -L -o ~/UnityIL2CPPModule.tar.xz https://download.unity3d.com/download_unity/6eacc8284459/LinuxEditorTargetInstaller/UnitySetup-Linux-IL2CPP-Support-for-Editor-2021.3.0f1.tar.xz
              fi
              if [[ ${{ inputs.target_platform }} == 'mobile' ]]; then
                curl -L -o ~/UnityAndroidModule.tar.xz https://download.unity3d.com/download_unity/6eacc8284459/MacEditorTargetInstaller/UnitySetup-Android-Support-for-Editor-2021.3.0f1.pkg
              fi
            elif [[ ${{ inputs.unity_version }} == '2020.3.0' ]]; then
              curl -L -o ~/Unity.tar.xz https://download.unity3d.com/download_unity/1fb1bf06830e/LinuxEditorInstaller/Unity.tar.xz
              if [[ ${{ inputs.compiler }} == 'il2cpp' ]]; then
                curl -L -o ~/UnityIL2CPPModule.tar.xz https://download.unity3d.com/download_unity/c7b5465681fb/LinuxEditorTargetInstaller/UnitySetup-Linux-IL2CPP-Support-for-Editor-2020.3.0f1.tar.xz
              fi
              if [[ ${{ inputs.target_platform }} == 'mobile' ]]; then
                curl -L -o ~/UnityAndroidModule.tar.xz https://download.unity3d.com/download_unity/c7b5465681fb/MacEditorTargetInstaller/UnitySetup-Android-Support-for-Editor-2020.3.0f1.pkg
              fi
            fi
          fi

      - name: Install Unity
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          shell: bash
          command: |
            if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
              sudo installer -package ~/Unity.pkg -target /
            elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
              tar -xJf ~/Unity.tar.xz -C /opt
            fi

      - name: Print ~
        shell: bash
        if: ${{ inputs.os }} == 'ubuntu-latest'
        run: ls ~
        continue-on-error: true

      - name: Print /opt dir
        shell: bash
        if: ${{ inputs.os }} == 'ubuntu-latest'
        run: ls /opt
        continue-on-error: true

      - name: Print /opt dir 2
        shell: bash
        if: ${{ inputs.os }} == 'ubuntu-latest'
        run: ls /opt/Unity
        continue-on-error: true

      - name: Print /opt dir 3
        shell: bash
        if: ${{ inputs.os }} == 'ubuntu-latest'
        run: ls /opt/Editor
        continue-on-error: true

      - name: Print /opt dir 4
        shell: bash
        if: ${{ inputs.os }} == 'ubuntu-latest'
        run: ls /opt/Editor/Unity
        continue-on-error: true

      - name: Install IL2CPP Module
        if: inputs.compiler == 'il2cpp'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          shell: bash
          command: |
            if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
              sudo installer -package ~/UnityIL2CPPModule.pkg -target /
            elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
              tar -xJf ~/UnityIL2CPPModule.tar.xz -C /opt/Editor
            fi

      - name: Install Mobile Module
        if: inputs.target_platform == 'mobile'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          shell: bash
          command: |
            if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
              sudo installer -package ~/UnityIosModule.pkg -target /
            elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
              sudo installer -package ~/UnityIosModule.pkg -target /opt/Editor
            fi

      - name: Create Test Results dir
        shell: bash
        run: mkdir test_results

      - name: Generate .ALF license file
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -createManualActivationFile -quit
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            /opt/Editor/Unity -batchmode -nographics -createManualActivationFile -quit
          fi
        continue-on-error: true

      - name: List dir
        shell: bash
        run: |
          ls
          grep ".alf$"
          ULF_FILE_PATH=$(ls | grep ".alf$")
          echo $ULF_FILE_PATH
        continue-on-error: true

      - name: Ensure code file exists
        shell: bash
        run: touch ./code.txt
        continue-on-error: true

      - name: Activate .ALF License - Get .ULF file
        id: generate_ulf_license_attempt_1
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
          fi
        timeout-minutes: 25
        continue-on-error: true

      - name: Activate .ALF License - Get .ULF file - Attempt 2
        if: steps.generate_ulf_license_attempt_1.outcome == 'failure'
        id: generate_ulf_license_attempt_2
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
          fi
        timeout-minutes: 25
        continue-on-error: true

      - name: Activate .ALF License - Get .ULF file - Attempt 3
        if: steps.generate_ulf_license_attempt_2.outcome == 'failure'
        id: generate_ulf_license_attempt_3
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
          fi
        timeout-minutes: 25
        continue-on-error: true

      - name: Activate Unity with .ULF license file
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -manualLicenseFile "$(ls | grep ".ulf$")" -quit
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            /opt/Editor/Unity -batchmode -nographics -manualLicenseFile "$(ls | grep ".ulf$")" -quit
          fi
        continue-on-error: true

      - name: Enable Stream Tests in Unity
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -executeMethod StreamChat.EditorTools.StreamEditorTools.EnableStreamTestsEnabledCompilerFlag -quit
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            /opt/Editor/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -executeMethod StreamChat.EditorTools.StreamEditorTools.EnableStreamTestsEnabledCompilerFlag -quit
          fi

      - name: Run Unity Tests
        id: run_unity_tests
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -runTests -testResults ~/test_results/results.xml -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }}
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            /opt/Editor/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -runTests -testResults ~/test_results/results.xml -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }}
          fi
        continue-on-error: true

      - name: Force Close Unity
        shell: bash
        run: sudo pkill -x Unity
        continue-on-error: true

      - name: Print Test Results
        if: always()
        shell: bash
        run: cat ~/test_results/results.xml

      - name: Generate HTML test report
        uses: rempelj/nunit-html-action@v1.0.1
        if: always()
        with:
          inputXmlPath: ~/test_results/results.xml
          outputHtmlPath: ~/test_results/results.html

#      - name: Upload tests results XML Artifact
#        uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: ${{ inputs.os }}_${{ inputs.unity_version }}_${{ inputs.compiler }}_${{ inputs.dotnet_version }}_${{ inputs.target_platform }}_test_results.xml
#          path: ~/test_results/results.xml

      - name: Upload tests results Html Artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ inputs.os }}_${{ inputs.unity_version }}_${{ inputs.compiler }}_${{ inputs.dotnet_version }}_${{ inputs.target_platform }}_test_results.html
          path: ~/test_results/results.html

      - name: Validate All Tests Passed
        if: steps.run_unity_tests.outcome == 'failure'
        run: exit 1

      - name: Generate GH Summary Comment
        uses: sierpinskid/nunit-github-comment@v1
        if: github.event_name == 'pull_request'
        with:
          inputXmlPath: ~/test_results/results.xml
          outputFilePath: ~/test_results/gh_comment.txt

      - name: Set GH Comment as variable
        if: github.event_name == 'pull_request'
        id: generate_gh_comment
        run: echo "::set-output name=gh_comment::$(cat ~/test_results/gh_comment.txt)"

      - name: Build Sample App
        shell: bash
        run: |
          if [[ ${{ inputs.os }} == 'macos-latest' ]]; then
            sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -executeMethod "StreamChat.EditorTools.StreamEditorTools.BuildSampleApp" -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }} -apiCompatibility ${{ inputs.dotnet_version }} -scriptingBackend ${{ inputs.compiler }} -buildTargetPlatform ${{ inputs.target_platform }} -buildTargetPath "~/SampleAppBuild/App" -quit
          elif [[ ${{ inputs.os }} == 'ubuntu-latest' ]]; then
            /opt/Editor/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -executeMethod "StreamChat.EditorTools.StreamEditorTools.BuildSampleApp" -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }} -apiCompatibility ${{ inputs.dotnet_version }} -scriptingBackend ${{ inputs.compiler }} -buildTargetPlatform ${{ inputs.target_platform }} -buildTargetPath "~/SampleAppBuild/App" -quit
          fi

      - name: LS
        shell: bash
        run: |
          ls
          echo '----'
          ls ~
          echo '----'
          ls "~/SampleAppBuild/"
          echo '----'
          ls "~/SampleAppBuild/App/"
          echo '----'
        continue-on-error: true

#      - name: Upload Sample App
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ inputs.os }}_${{ inputs.unity_version }}_${{ inputs.compiler }}_${{ inputs.dotnet_version }}_${{ inputs.target_platform }}_sample_app
#          path: ~/SampleAppBuild/App/
